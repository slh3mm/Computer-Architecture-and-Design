(SRCTools Version 3.1.1)
 HexLoc     DecLoc    MachWord   Label        Instruction                Comment
                                                                         ; SRC Assembly File:  alu_tst.asm
                                                                         ;
                                                                         ; Tests assembling and processing of the alu and shift instructions.
                                                                         ; ALU instructions are used to fill registers r1->r15 with the 
                                                                         ; values 1->15.  Then two rows of registers r16->r23 are filled
                                                                         ; with identifiable strings (mostly 'f') to observe proper bit
                                                                         ; manipulations.  Finally, registers r24->r31 are again filled with
                                                                         ; their values 24->31 (easily confirmed in decimal viewing mode).
                                                                         ;
                                                                         ; Warning: altering, inserting or moving any instructions will invalidate
                                                                         ; the comments and the validity of the tests.
                                                                         
                                              .org 0                     ; 0x0000 - start of ROM
00000000  0000000000  2fc01000                la r31, Main               ; Reset action: load addess label, Main
00000004  0000000004  403e0001                br r31                     ; branch to Main
                                                                         
                                              .org 4096                  
                                One:          .equ 1                     ; define constant for value = 1
00001000  0000004096  68400001  Main:         addi r1, r0, One           ; put 1 in r1 using a constant label
00001004  0000004100  60821000  Two:          add r2, r1, r1             ; add 1 and 1 for 2 in r2
00001008  0000004104  b0c22000  Three:        or r3, r1, r2              ; OR 1 and 2 for 3 in r3
0000100c  0000004108  61023000  Four:         add r4, r1, r3             ; add 1 and 3 for 4 in r4
00001010  0000004112  00000000                nop                        ; toss in a nop
00001014  0000004116  61882000  Six:          add r6, r4, r2             ; add 4 and 2 for 6 in r6
00001018  0000004120  714c1000  Five:         sub r5, r6, r1             ; subtract 1 from 6 for 5 in r5
0000101c  0000004124  b9c80003  Seven:        ori r7, r4, 3              ; OR 4 and 3 for 7 in r7
00001020  0000004128  6a8e0003  Ten:          addi r10, r7, 3            ; add 7 and 3 for 10 in r10
00001024  0000004132  7a002000                neg r8, r2                 ; neg 2 for -2 in r8
00001028  0000004136  62148000  Eight:        add r8, r10, r8            ; add -2 and 10 for 8 in r8
0000102c  0000004140  6a55ffff  Nine:         addi r9, r10, -1           ; add 10 and -1 for 9 in r9
00001030  0000004144  6ece0014  TwentySeven:  addi r27, r7, 0x14         ; add 7 and 20 (as hex value) for 27 in r27 (binary ...00011011)
00001034  0000004148  63d26000  Fifteen:      add r15, r9, r6            ; add 9 and 6 for 15 in r15  (binary ...00001111)
00001038  0000004152  a2dfb000  Eleven:       and r11, r15, r27          ; AND 15 and 27 for 11 in r11
0000103c  0000004156  00000000                nop                        
                                                                         ; perform bit manipulations using identifiable strings
00001040  0000004160  00000000                nop                        
00001044  0000004164  c4001000                not r16, r1                ; NOT of 1 = (1111...1110) = fffffffe = -2 in r16
00001048  0000004168  d4601000                shr r17, r16, r1           ; shift r16 right 1 (in r1) for (0111....1111) = 7ffffff in r17
0000104c  0000004172  a4a30000                and r18, r17, r16          ; AND r16 and r17 for (0111...1110) = 7ffffffe in r18
00001050  0000004176  ece40010                shc r19, r18, 16           ; circular shift r18 left 16 (in c3) for fffe7fff in r19
00001054  0000004180  e51e001c                shl r20, r15, 28           ; shift 15 left 28 (in c3) for (1111...0000) = f0000000 in r20
00001058  0000004184  ed688000                shc r21, r20, r8           ; circular shift r20 left 8 (in r8) for 000000f0 in r21
0000105c  0000004188  dde8001f                shra r23, r20, 31          ; shift r20 right 31 (in c3) for (1111...1111) = ffffffff = -1 in r23
00001060  0000004192  75801000  MinusOne:     sub r22, r0, r1            ; subtract 1 from 0 for -1 in r22 = ffffffff
00001064  0000004196  00000000                nop                        
                                                                         ; resume filling registers with register values (i.e., 12 in r12, etc.)
00001068  0000004200  00000000                nop                        
0000106c  0000004204  ab22000c  Twelve:       andi r12, r17, 12          ; AND r17 and 12 (in c3) to put 12 in r12
00001070  0000004208  d362001d                shr r13, r17, 29           ; shift r17 right 29 (in c3) for 3 in r13
00001074  0000004212  e35a2000                shl r13, r13, r2           ; shift r13 left 2 (in r2) for 12 in r13
00001078  0000004216  635a1000  Thirteen:     add r13, r13, r1           ; add 1 to 12 for 13 in r13 
0000107c  0000004220  dba5b000                shra r14, r18, r27         ; shift r18 right 27 (in r27) arithmetic for 15 in r14
00001080  0000004224  739c1000  Fourteen:     sub r14, r14, r1           ; subtract 1 (in r1) from 15 in r14 for 14 in r14
00001084  0000004228  e60c2000  TwentyFour:   shl r24, r6, r2            ; shift 6 left by 2 (in r2) multiplying by 4 for 24 in r24
00001088  0000004232  66770000  TwentyFive:   add r25, r27, r16          ; 2's-complement add 27 to -2 (in r16) for 25 in r25
0000108c  0000004236  66b02000  TwentySix:    add r26, r24, r2           ; add 24 and 2 for 26 in r26
00001090  0000004240  e71c0001  TwentyEight:  shl r28, r14, 1            ; shift 14 left 1 (in c3) for 28 in r28
                                three:        .equ 3                     ; define constant for value = 3
00001094  0000004244  bff80003  ThirtyOne:    ori r31, r28, three        ; OR 28 and 3 (in c3 as constant label) for 31 in r31
00001098  0000004248  6f7ffffe  TwentyNine:   addi r29, r31, -2          ; add 31 and -2 (in c3) for 29 in r29
0000109c  0000004252  d7be0001                shr r30, r31, 1            ; shift 31 right by 1 (in c3) for 15 in r30
000010a0  0000004256  e7bc0001  Thirty:       shl r30, r30, 1            ; shift 15 left by 1 (in c3) for 30 in r30	
000010a4  0000004260  f8000000                stop                       

--- Symbol Table ---
TwentyFour: 4228
TwentyEight: 4240
Six: 4116
Eight: 4136
Thirteen: 4216
Fourteen: 4224
Four: 4108
three: 3
TwentyFive: 4232
Twelve: 4204
Ten: 4128
Main: 4096
Five: 4120
TwentySeven: 4144
Seven: 4124
Three: 4104
Two: 4100
ThirtyOne: 4244
Eleven: 4152
TwentyNine: 4248
Thirty: 4256
Fifteen: 4148
TwentySix: 4236
MinusOne: 4192
Nine: 4140
One: 1
